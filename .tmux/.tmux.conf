################################################################################
# PLUGINS
################################################################################

set -g @plugin 'tmux-plugins/tpm' # Required
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-sessionist'
set -g @plugin 'casonadams/tmux-vi-navigation'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'wfxr/tmux-fzf-url' # prefix + u
set -g @plugin 'jaclu/tmux-menus'
set -g @plugin 'dracula/tmux'

################################################################################
# BINDINGS
################################################################################

# Reload tmux config
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Use Alt-arrow keys without prefix key to switch panes
bind -n S-Left select-pane -L
bind -n S-Down select-pane -D
bind -n S-Up select-pane -U
bind -n S-Right select-pane -R
# Shift arrow to switch windows
bind -n M-Left  previous-window
bind -n M-Right next-window

# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind Space send-prefix

################################################################################
# NAVIGATION
################################################################################

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"


# -- urlview -------------------------------------------------------------------

bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"


# -- facebook pathpicker -------------------------------------------------------

bind F run "cut -c3- ~/.tmux.conf | sh -s _fpp #{pane_id}"


# -- list choice (tmux < 2.4) --------------------------------------------------

# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'


# -- edit mode (tmux < 2.4) ----------------------------------------------------

# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

################################################################################
# BUFFERS
################################################################################

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# WINDOW NAVIGATION ############################################################
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# GIT TOOLS MENU ###############################################################
bind G display-menu -T 'Git Tools' -x P -y P \
   'Status' s "run-shell 'cd #{pane_current_path} && git status'" \
   'Log' l "run-shell 'cd #{pane_current_path} && git log" \
   'Fetch' f "run-shell 'cd #{pane_current_path} && git fetch'" \
   'Pull' p "run-shell 'cd #{pane_current_path} && git pull'" \
   'Diff' d "run-shell 'cd #{pane_current_path} && git diff'" \
   'Stash' S "run-shell 'cd #{pane_current_path} && git stash'" \
   'Stash Pop' P "run-shell 'cd #{pane_current_path} && git stash pop'" \
   'Switch to Develop' D "run-shell 'cd #{pane_current_path} && git checkout develop'" \
   'Switch to Main' m "run-shell 'cd #{pane_current_path} && git checkout main'" \

# NODE TOOLS ###################################################################
bind N display-menu -T 'Node Tools' -x P -y P \
   'Use Node Version' u "run-shell 'cd #{pane_current_path} && nvm use'" \
   'Nuke node_modules' n "run-shell 'cd #{pane_current_path} && rm -rf node_modules'" \
   'Yarn Install' i "run-shell 'cd #{pane_current_path} && rm -rf node_modules && yarn install'" \
   'Nuke and Install' r "run-shell 'cd #{pane_current_path} && rm -rf node_modules && yarn install'" \

################################################################################
# Settings
################################################################################

# GENERAL ######################################################################

# Automatically set window title
set-option -g set-titles on
set-window-option -g automatic-rename on

# Interaction ##################################################################
# Turn on mouse mode
set -g mouse on
# This let's you use c-b 1 - 9 for switching windows, rather than to have to
# start with 0, and reach all the way over into alaska for the first window.

# DISPLAY ######################################################################
set -g base-index 1
set -g pane-base-index 1
set -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# Fluff ########################################################################
# Screen Saver
# set -g lock-after-time 3600 # Hour
# set -g lock-command "cmatrix -sba -u 5 -C blue"

# tmux-menus ###################################################################

# https://github.com/jaclu/tmux-menus#tmux-menus
set -g @menus_trigger 'q'
set -g @menus_location_x 'C'
set -g @menus_location_y 'C'

################################################################################
# Theme & Colors
################################################################################

# availrble plugins: battery, cpu-usage, git, gpu-usage, ram-usage, network, network-bandwidth, network-ping, weather, time
set -g @dracula-plugins "git weather  time"
set -g @dracula-show-powerline true

# for left
set -g @dracula-show-left-sep 

# for right symbol (can set any symbol you like as seperator)
set -g @dracula-show-right-sep 
set -g @dracula-show-flags true

# the default is 5, it can accept any number
set -g @dracula-refresh-rate 5
# it can accept `session`, `smiley`, `window`, or any character.
set -g @dracula-show-left-icon session

# default is 1, it can accept any number and 0 disables padding.
set -g @dracula-left-icon-padding 1

set -g @dracula-cpu-usage-label "CPU"

set -g @dracula-cpu-display-load true

set -g @dracula-gpu-usage-label "GPU"
set -g @dracula-ram-usage-label "RAM"
set -g @dracula-ping-server "google.com"
set -g @dracula-show-timezone false
set -g @dracula-day-month true
set -g @dracula-military-time true
set -g @dracula-git-disable-status true
# default is ✓. Avoid using non unicode characters that bash uses like $, * and ! 
set -g @dracula-git-show-current-symbol ✓
set -g @dracula-ping-rate 5

# default is unicode !. Avoid bash special characters 
set -g @dracula-git-show-diff-symbol !

# default is unicode no message
set -g @dracula-git-no-repo-message ""

set -g @dracula-show-fahrenheit false

################################################################################
# TMUX plugin manager - This must run last
################################################################################

# Check to see if tmux is installed, if not clone the repo. This assumes Git is
# installed.
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Run the plugin manager
run -b '~/.tmux/plugins/tpm/tpm'
